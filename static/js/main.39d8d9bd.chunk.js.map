{"version":3,"sources":["image1.svg","logo.svg","components/States.js","components/Resume.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Resume","props","fetch","then","res","json","data","console","log","info","profiles","location","profilesData","i","basic","className","src","Img","alt","style","width","name","career","Home","profile","map","value","index","key","role","phone","email","to","pathname","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,qJCERC,Y,gDCEpB,SAASC,EAAOC,GAC3BC,MAAM,+CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAEC,QAAQC,IAAIF,MAExB,IAAIG,EAAKH,EAAKI,SAAST,EAAMU,SAASC,aAAaC,GAE/C,OADJN,QAAQC,IAAIC,EAAKK,OAET,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,QACjB,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAKC,IAAI,UAAUC,MAAO,CAACC,MAAM,UACjD,4BAAKX,EAAKK,MAAMO,SAIV,yBAAKN,UAAU,gBACf,yBAAKA,UAAU,QACjB,yBAAKA,UAAU,aACX,gDACV,2BAAIN,EAAKK,MAAMQ,YCwCrB,IAAIC,EAAK,WACP,IAAIC,EAAQlB,EAAKI,SAEhB,OADAH,QAAQC,IAAIgB,GAEX,yBAAKT,UAAU,8BAEXS,EAAQC,KAAI,SAACC,EAAMC,GAAP,OACV,yBAAKZ,UAAU,mCAAmCa,IAAKD,GACrD,yBAAKZ,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAKC,IAAI,UAAUC,MAAO,CAACC,MAAM,UACjD,4BAAKM,EAAMZ,MAAMO,MACjB,4BAAKK,EAAMZ,MAAMe,MACjB,4BAAKH,EAAMZ,MAAMgB,OACjB,4BAAKJ,EAAMZ,MAAMiB,OACjB,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAS,UAAUrB,aAAa,CAACC,EAAEc,IAASZ,UAAU,mBAAjE,mBASKmB,EA5Ef,WACE,OACE,yBAAKnB,UAAU,OA0CjB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,UAAUC,UAAWrC,OC/CfsC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.39d8d9bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.6bb34898.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class state extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        text: 0\r\n      }\r\n    }\r\n      \r\n      changeText = () => {\r\n        const { text } = this.state \r\n        this.setState({ text : text+1}); \r\n      } \r\n      changeText1 = () => {\r\n        const { text } = this.state \r\n        this.setState({ text : 0}); \r\n      } \r\n      render() {\r\n        const { text } = this.state \r\n        return (\r\n            <>\r\n            <h1>{text}</h1>\r\n          <button className=\"btn\"\r\n             onClick={ () => { this.changeText()}  }> Click Here.... </button> \r\n             <button className=\"but\"\r\n             onClick={ () => { this.changeText1()}  }>Reset</button> \r\n             </>\r\n        )};\r\n        }","import React from 'react'\r\nimport data from \"../data/data.json\";\r\nimport Img from \"../image1.svg\";\r\n\r\nexport default function Resume(props) {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts/\")\r\n    .then(res=>res.json())\r\n    .then(data=>console.log(data))\r\n\r\n    let info=data.profiles[props.location.profilesData.i]\r\n    console.log(info.basic)\r\n        return (\r\n            <div className=\"row justify-contentcenter\">\r\n                <div className=\"col-lg-3 m-2\">\r\n                <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                <img src={Img} alt=\"profile\" style={{width:\"10em\"}}></img>\r\n          <h2>{info.basic.name}</h2>\r\n              </div>\r\n              </div>\r\n                </div>\r\n                <div className=\"col-lg-8 m-2\">\r\n                <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                  <h2>career objective</h2>\r\n        <p>{info.basic.career}</p>\r\n              </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import Hello from \"./hello\";\n//mport Wish from \"./Wish\";\n//import Greeting from './components/Greeting';\n//import Welcome from './components/Welcome';\nimport States from './components/States';\nimport Hooks from './components/Hooks';\nimport data from \"./data/data.json\";\nimport Img from \"./image1.svg\";\nimport { Route ,Link, BrowserRouter } from 'react-router-dom';\nimport Resume from \"./components/Resume\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <States></States>\n      <h1>Using Hooks</h1>\n      <Hooks/> */}\n        {/* <h1>\n        apssdc\n      </h1>\n      <h2>\n        supraja\n      </h2>\n      <Home nme=\"apssdc\"/>\n      <Hello></Hello> \n<Wish/> */}\n{/* <Greeting name=\"supraja\" mail=\"supraja@gmail.com\">\n  </Greeting>\n  <img src={logo} style={{width:\"100px\"}} />\n <Greeting name=\"supraja\" mail=\"supraja@gmail.com\">\n   <p>hi</p>\n <p>Hello Da</p>\n </Greeting>\n  <h2>Welcome</h2> */}\n    {/* //<div className=\"App\">\n      //<header className=\"App-header\">\n        //<img src={logo} className=\"App-logo\" alt=\"logo\" />\n        //<p>\n          //Edit <code>src/App.js</code> and save to reload.\n        //</p>\n        //<a */}\n          {/* //className=\"App-link\"\n          //href=\"https://reactjs.org\"\n          //target=\"_blank\"\n          //rel=\"noopener noreferrer\"\n        //>\n          //Learn React\n        //</a>\n      //</header>\n    //</div> */}\n   {/* <h1>\n      its home component\n    </h1>\n    <Welcome name=\"supraja\" college=\"svecw\"></Welcome> */} \n  <BrowserRouter>\n  <Route exact path=\"/\" component={Home}/>\n  <Route path=\"/resume\" component={Resume}/>\n  </BrowserRouter>\n  {/* <Home/>  */}\n  </div>\n    );\n  }\n  let Home=()=>{\n    let profile=data.profiles;\n     console.log(profile);\n     return(\n      <div className=\"row justify-content-center\">\n        {\n          profile.map((value,index)=>(\n            <div className=\"col-sm-10 col-md-4 col-lg-4 mt-1\" key={index}>\n              <div className=\"card\">\n              <div className=\"card-body\">\n                <img src={Img} alt=\"profile\" style={{width:\"10em\"}}></img>\n          <h2>{value.basic.name}</h2>\n          <h2>{value.basic.role}</h2>\n          <h2>{value.basic.phone}</h2>\n          <h2>{value.basic.email}</h2>\n          <Link to={{pathname:\"/resume\",profilesData:{i:index} }}className=\"btn btn-primary\">Profile</Link>\n              </div>\n              </div>\n            </div>\n          ))\n        }\n      </div>\n     );\n   }\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}